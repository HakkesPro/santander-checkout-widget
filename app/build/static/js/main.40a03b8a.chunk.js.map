{"version":3,"sources":["components/Loader.tsx","components/AppRoutes.tsx","App.tsx","index.tsx","redux/initialStates.ts","types/global-types.ts","redux/redux-hooks.ts","redux/store.ts","redux/reducers/context.ts","redux/reducers/paymentDetails.ts","redux/actions.ts","utils/helpers.ts"],"names":["Loader","containerWidth","containerHeight","Placeholder","style","width","height","Image","Modern","lazy","ConfigPage","Classic","initRoutePush","history","mode","location","pathname","Paths","CONFIG","historyPush","path","push","search","Mode","MODERN","CLASSIC","AppRoutes","useHistory","useAppSelector","context","config","fallback","exact","component","urlConfig","getConfigFromUrl","urlTheme","getThemeFromUrl","setStore","dispatch","defaultLocaleId","setUrlConfigs","setTranslations","localeId","contextActions","setConfig","setTheme","urlLocaleId","translations","App","useAppDispatch","ReactDOM","render","store","document","getElementById","defaults","LOCALE_ID","LocaleIds","SV_SE","COUNTRY","Countries","SWE","initialConfig","font","headerFontSize","displayLogo","logoUrl","logoHeight","Measures","WIDTH","HEIGHT","effectiveInterestRate","country","labelPosition","LabelPosition","LEFT","initialTheme","background","border","text","footerFontSize","borderRadius","initTranslations","intialAmountOptions","key","value","useDispatch","useSelector","configureStore","reducer","paymentDetails","initialState","theme","contextSlice","createSlice","name","reducers","state","action","payload","actions","months","amountOptions","selectedAmount","paymentSlice","setMonths","setAmountOptions","setSelectedAmount","paymentActions","setAllowedKeys","keys","addKey","forEach","URL","window","href","searchParams","get","parseQueryString","decodeURIComponent","allowedConfigs","Object","urlConfigs","allowedKeys","map","themeProp","split","isIframed","self","top","e","amountWithCode","currencyCode","amount","Intl","NumberFormat","replace","currency","minimumFractionDigits","format","getCurrencyCodeByCountry","NOR","NO_NO","DNK","DA_DK","GBR","EN_GB","amountOptionsFixed","getState","option","toPascalCase","str","toUpperCase","splice","join","getFixedTotalAmount","getTotalAmount","getFixedTotalCost"],"mappings":"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","file":"static/js/main.40a03b8a.chunk.js","sourcesContent":["import type { FC } from 'react';\nimport { Placeholder } from 'semantic-ui-react';\n\ninterface Props {\n  containerWidth: string,\n  containerHeight: string\n}\n\nconst Loader:FC<Props> = ({ containerWidth, containerHeight }): JSX.Element => (\n  <Placeholder style={{ width: containerWidth, height: containerHeight }}>\n    <Placeholder.Image />\n  </Placeholder>\n);\n\nexport default Loader;\n","import type { FC } from 'react';\nimport { lazy, Suspense } from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\nimport { Paths, Mode } from 'types/global-types';\nimport { useAppSelector } from 'redux/redux-hooks';\nimport Loader from 'components/Loader';\n\nconst Modern = lazy(() => import('pages/Modern'));\nconst ConfigPage = lazy(() => import('pages/Config'));\nconst Classic = lazy(() => import('pages/Classic'));\n\nconst AppRoutes: FC = (): JSX.Element => {\n  const history:any = useHistory();\n  const containerHeight: string = useAppSelector(({ context }) => context.config.containerHeight);\n  const containerWidth: string = useAppSelector(({ context }) => context.config.containerWidth);\n  const mode: Mode = useAppSelector(({ context }) => context.config.mode);\n\n  initRoutePush(history, mode);\n\n  return (\n    <Switch>\n      <Suspense fallback={<Loader containerHeight={containerHeight} containerWidth={containerWidth} />}>\n        <Route exact path={Paths.CONFIG} component={ConfigPage} />\n        <Route exact path={Paths.CLASSIC} component={Classic} />\n        <Route exact path={Paths.MODERN} component={Modern} />\n      </Suspense>\n    </Switch>\n  );\n};\n\nconst initRoutePush = (history: any, mode: Mode): void | null => {\n  const isConfigPath: boolean = history.location.pathname === Paths.CONFIG;\n  if (isConfigPath) return null;\n\n  const historyPush = (path: string) => history.push(path + history.location.search);\n\n  switch (mode) {\n    case Mode.MODERN:\n    default:\n      historyPush(Paths.MODERN);\n      break;\n    case Mode.CLASSIC:\n      historyPush(Paths.CLASSIC);\n      break;\n  }\n};\n\nexport default AppRoutes;\n","import type { FC } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport AppRoutes from 'components/AppRoutes';\nimport { getConfigFromUrl, getThemeFromUrl } from 'utils/helpers';\nimport { useAppDispatch, useAppSelector } from 'redux/redux-hooks';\nimport { contextActions } from 'redux/actions';\nimport translations from 'utils/translations.json';\nimport type { AppDispatch } from 'redux/store';\nimport type { Config, Theme, LocaleIds } from 'types/global-types';\nimport './styles/App.scss';\n\ntype ConfigParams = Partial<Config>\ntype ThemeParams = Partial<Theme>\n\nconst urlConfig: ConfigParams = getConfigFromUrl();\nconst urlTheme: ThemeParams = getThemeFromUrl();\n\nconst App: FC = () => {\n  const dispatch: AppDispatch = useAppDispatch();\n  const defaultLocaleId: LocaleIds = useAppSelector(({ context }) => context.config.defaultLocaleId);\n\n  setStore(dispatch, defaultLocaleId);\n\n  return (\n    <Router>\n      <AppRoutes />\n    </Router>\n  );\n};\n\n// App helpers\ntype SetStore = (d: AppDispatch, l: LocaleIds) => void\nconst setStore: SetStore = (dispatch, defaultLocaleId) => {\n  setUrlConfigs(dispatch);\n  setTranslations(dispatch, urlConfig.localeId, defaultLocaleId);\n};\n\ntype SetConfigsFromUrl = (d: AppDispatch) => void\nconst setUrlConfigs: SetConfigsFromUrl = (dispatch) => {\n  dispatch(contextActions.setConfig(urlConfig));\n  dispatch(contextActions.setTheme(urlTheme));\n};\n\ntype SetTranslations = (d: AppDispatch, u: undefined | LocaleIds, s: LocaleIds) => void\nconst setTranslations: SetTranslations = (dispatch, urlLocaleId, defaultLocaleId) => {\n  const localeId: LocaleIds = urlLocaleId || defaultLocaleId;\n  dispatch(contextActions.setTranslations(translations[localeId]));\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux/store';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import {\n  LocaleIds,\n  Mode,\n  Measures,\n  Countries,\n  LabelPosition,\n} from 'types/global-types';\nimport translations from 'utils/translations.json';\nimport type { AmountOption } from 'types/global-types';\n\nconst defaults = {\n  // Sweden as default .. might change to other country\n  LOCALE_ID: LocaleIds.SV_SE,\n  COUNTRY: Countries.SWE,\n};\n\nexport const initialConfig = () => ({\n  mode: Mode.MODERN,\n  font: 'arial',\n  headerFontSize: '14px',\n  displayLogo: true,\n  // eslint-disable-next-line max-len\n  logoUrl: 'https://d2o7rqynhxcgmp.cloudfront.net/uploads/images/footer/Sweden/Bambora-footer.svg',\n  logoHeight: '30px',\n  localeId: defaults.LOCALE_ID,\n  defaultLocaleId: defaults.LOCALE_ID, // Need this for some initial re-render issues\n  containerWidth: Measures.WIDTH,\n  containerHeight: Measures.HEIGHT,\n  effectiveInterestRate: 27.49,\n  country: defaults.COUNTRY,\n  labelPosition: LabelPosition.LEFT,\n});\n\nexport const initialTheme = () => ({\n  background: '#f8f8f8',\n  border: 'rgb(202 202 202)',\n  text: '#333333',\n  footerFontSize: '0.8rem',\n  borderRadius: '.28571429rem',\n});\n\nexport const initTranslations = () => ({\n  ...translations[defaults.LOCALE_ID],\n});\n\nexport const intialAmountOptions = (): Array<AmountOption> => ([\n  { key: 2499, text: '2 499', value: 2499 },\n  { key: 1999, text: ' 1 999', value: 1999 },\n  { key: 1499, text: '1 499', value: 1499 },\n  { key: 1299, text: '1 299', value: 1299 },\n]);\n","/* eslint no-unused-vars: \"off\" */\nimport type { DropdownItemProps } from 'semantic-ui-react';\n\nexport interface Translations {\n  header: string,\n  footer: string\n  months: string,\n  monthsAlias: string,\n  monthlyAmount: string,\n  effectiveInterestRate: string,\n  inTotal: string,\n  cost: string,\n  currencyCode: string,\n  effectiveInterestRateAlias: string\n}\n\nexport enum LocaleIds {\n  SV_SE = 'sv_SE',\n  NO_NO = 'no_NO',\n  DA_DK = 'da_DK',\n  EN_GB = 'en_GB'\n}\n\nexport enum Countries {\n  SWE = 'SWE',\n  NOR = 'NOR',\n  DNK = 'DNK',\n  GBR = 'GBR'\n}\n\nexport enum Mode {\n  MODERN = 'modern',\n  CLASSIC = 'classic'\n}\n\nexport interface Config {\n  mode: Mode,\n  font: string,\n  headerFontSize: string,\n  displayLogo: boolean,\n  logoUrl: string,\n  logoHeight: string,\n  localeId: LocaleIds,\n  defaultLocaleId: LocaleIds,\n  containerWidth: string,\n  containerHeight: string,\n  effectiveInterestRate: number,\n  country: Countries,\n  labelPosition: LabelPosition\n}\n\nexport interface Theme {\n  background: string,\n  border: string,\n  text: string,\n  footerFontSize: string,\n  borderRadius: string\n}\n\nexport enum Paths {\n  CONFIG = '/config',\n  CLASSIC = '/classic',\n  MODERN = '/modern'\n}\n\nexport enum Measures {\n  WIDTH = '400px',\n  HEIGHT = '150px'\n}\n\nexport interface AmountOption extends DropdownItemProps {\n  key: number,\n  text: string,\n  value: number\n}\n\nexport interface PaymentDetailsState {\n  months: number\n  amountOptions: Array<AmountOption>,\n  selectedAmount: null | number\n}\n\nexport enum LabelPosition {\n  LEFT = 'left',\n  RIGHT = 'right'\n}\n","import type { TypedUseSelectorHook } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import type { ThunkAction, Action } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport context from './reducers/context';\nimport paymentDetails from './reducers/paymentDetails';\n\nexport const store = configureStore({\n  reducer: {\n    context,\n    paymentDetails,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport type {\n  Config,\n  Theme,\n  Translations,\n} from 'types/global-types';\nimport { initialConfig, initialTheme, initTranslations } from '../initialStates';\n\nexport interface InitialState {\n  config: Config,\n  theme: Theme,\n  translations: Translations\n}\n\nconst initialState: InitialState = {\n  config: initialConfig(),\n  theme: initialTheme(),\n  translations: initTranslations(),\n};\n\nexport const contextSlice = createSlice({\n  name: 'Context',\n  initialState,\n  reducers: {\n    setConfig: (state, action: PayloadAction<Partial<Config>>) => {\n      state.config = {\n        ...state.config,\n        ...action.payload,\n      };\n    },\n    setTheme: (state, action: PayloadAction<Partial<Theme>>) => {\n      state.theme = {\n        ...state.theme,\n        ...action.payload,\n      };\n    },\n    setTranslations: (state, action: PayloadAction<Translations>) => {\n      state.translations = action.payload;\n    },\n  },\n});\n\nexport const contextActions = { ...contextSlice.actions };\n\nexport default contextSlice.reducer;\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport type { PaymentDetailsState, AmountOption } from 'types/global-types';\nimport { intialAmountOptions } from '../initialStates';\n\nconst initialState: PaymentDetailsState = {\n  months: 12,\n  amountOptions: intialAmountOptions(),\n  selectedAmount: null,\n};\n\nexport const paymentSlice = createSlice({\n  name: 'PaymentDetails',\n  initialState,\n  reducers: {\n    setMonths: (state, action: PayloadAction<number>) => {\n      state.months = action.payload;\n    },\n    setAmountOptions: (state, action: PayloadAction<AmountOption[]>) => {\n      state.amountOptions = action.payload;\n    },\n    setSelectedAmount: (state, action: PayloadAction<null | number>) => {\n      state.selectedAmount = action.payload;\n    },\n  },\n});\n\nexport const paymentActions = { ...paymentSlice.actions };\n\nexport default paymentSlice.reducer;\n","import { contextActions } from './reducers/context';\nimport { paymentActions } from './reducers/paymentDetails';\n\nexport {\n  contextActions,\n  paymentActions,\n};\n","import { initialConfig, initialTheme } from 'redux/initialStates';\nimport { Countries, LocaleIds } from 'types/global-types';\nimport type { AmountOption } from 'types/global-types';\nimport translations from 'utils/translations.json';\nimport { store } from 'redux/store';\n\nexport const parseQueryString = (key: string): string | null =>\n  new URL(window.location.href).searchParams.get(key);\n\nconst setAllowedKeys = (keys: string[], addKey: (key: string, value: string) => void) => {\n  keys.forEach((key: any) => {\n    const value = parseQueryString(key);\n    if (value) {\n      addKey(decodeURIComponent(key), decodeURIComponent(value));\n    }\n  });\n};\n\nexport const getConfigFromUrl = () => {\n  const config: any = initialConfig(); // Setting any because of the algorithms below\n  const allowedConfigs = Object.keys(config);\n  const urlConfigs:any = {};\n\n  const addKey = (key: string, value: string) => { urlConfigs[key] = value; };\n  setAllowedKeys(allowedConfigs, addKey);\n\n  return urlConfigs;\n};\n\nexport const getThemeFromUrl = () => {\n  const theme: any = initialTheme(); // Setting any because of the algorithms below\n  const allowedKeys = [\n    ...Object.keys(theme).map((key) => `theme.${key}`),\n  ];\n  const urlTheme:any = {};\n\n  const addKey = (key: string, value: string) => {\n    const themeProp = key.split('.')[1]; // theme.${themeProps} need to be splitted\n    urlTheme[themeProp] = value;\n  };\n  setAllowedKeys(allowedKeys, addKey);\n\n  return urlTheme;\n};\n\nexport const isIframed = () => {\n  try {\n    return window.self.window === window.top.window;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const amountWithCode = (localeId: string, currencyCode: string, amount: number) =>\n  new Intl.NumberFormat(\n    localeId.replace('_', '-'),\n    { style: 'currency', currency: currencyCode, minimumFractionDigits: 0 },\n  )\n    .format(amount);\n\n// Effective interest calculation function\ninterface GetCostArgs {\n  amount: number,\n  months: number\n  effectiveInterestRate: number\n}\ntype GetCostFromInterestRate = ({ amount, months, effectiveInterestRate }: GetCostArgs) => number\nexport const getCostFromInterestRate: GetCostFromInterestRate = ({\n  amount,\n  months,\n  effectiveInterestRate,\n}) => {\n  const interestRate = ((effectiveInterestRate / 100) + 1);\n  const years = months / 12;\n  // eslint-disable-next-line no-restricted-properties\n  return Number(((amount || 0) * Math.pow(interestRate, years)).toFixed(0));\n};\n\nexport const getCurrencyCodeByCountry = (country: Countries) => {\n  switch (country) {\n    case Countries.NOR:\n      return translations[LocaleIds.NO_NO].currencyCode;\n    case Countries.DNK:\n      return translations[LocaleIds.DA_DK].currencyCode;\n    case Countries.GBR:\n      return translations[LocaleIds.EN_GB].currencyCode;\n    case Countries.SWE:\n    default:\n      return translations[LocaleIds.SV_SE].currencyCode;\n  }\n};\n\nexport const amountOptionsFixed = (): Array<AmountOption> => {\n  const { paymentDetails, context } = store.getState();\n  return paymentDetails.amountOptions.map((option) => ({\n    ...option,\n    text: amountWithCode(\n      context.config.localeId,\n      getCurrencyCodeByCountry(context.config.country),\n      option.value,\n    ),\n  }));\n};\n\nexport const toPascalCase = (str: string) => {\n  const split = str.split('');\n  const toPascal = split[0].toUpperCase() + split.splice(1).join('');\n  return toPascal;\n};\n\nexport const getTotalAmount = (selectedAmount: number, months: number) => (selectedAmount || 0) * months;\n\nexport const getFixedTotalAmount = (selectedAmount: number, months: number) => {\n  const { context } = store.getState();\n  return amountWithCode(\n    context.config.localeId,\n    getCurrencyCodeByCountry(context.config.country),\n    getTotalAmount(selectedAmount, months),\n  );\n};\n\nexport const getFixedTotalCost = () => '{total?}';\n"],"sourceRoot":""}